<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lgs.com.postComment.mapper.PostCommentMapper">

	<select id="postCommentList" resultType="lgs.com.postComment.vo.PostCommentVO" parameterType="lgs.com.postComment.vo.PostCommentVO">
	/* postCommentList 코멘트 리스트 조회  */
		SELECT  LEVEL
			,	CONNECT_BY_ISLEAF AS LEAF
			,   POST_ID
			,	COMMENT_ID
			,	COMMENT_UPPER_ID
			,	COMMENT_TITLE
			,	COMMENT_TEXT
			,	DELETED
			,	CREATE_DATE
			,	CREATE_USER
			,	UPDATE_DATE
			,	UPDATE_USER
		FROM	POST_COMMENT
		<include refid="postCommentWhere"></include>
		START WITH UPPER_CODE IS NULL
		CONNECT BY PRIOR COMMENT_ID = COMMENT_UPPER_ID
	</select>

	<select id="postCommentCnt" resultType="int" parameterType="lgs.com.postComment.vo.PostCommentVO">
		/* postCommentCnt 코멘트 리스트 갯수 조회  */
		SELECT	COUNT(*) CNT
		FROM	POST_COMMENT
		<include refid="postCommentWhere"></include>
	</select>

	<select id="searchPostComment" resultType="lgs.com.postComment.vo.PostCommentVO" parameterType="lgs.com.postComment.vo.PostCommentVO">
		/* searchPostComment 코멘트  조회  */
		SELECT	POST_ID
			,	COMMENT_ID
			,	COMMENT_UPPER_ID
			,	COMMENT_TITLE
			,	COMMENT_TEXT
			,	DELETED
			,	CREATE_DATE
			,	CREATE_USER
			,	UPDATE_DATE
			,	UPDATE_USER
		FROM	POST_COMMENT
		WHERE	COMMENT_ID = #{commentId}
	</select>

	<sql id="postCommentWhere">
		/* postCommentWhere 코멘트 조회조건  */
		<where>
			<if test="commentId != null and commentId != ''">
				AND 	COMMENT_ID LIKE '%' || #{commentId} || '%'
			</if>
			<if test="commentTitle != null and commentTitle != ''">
				AND 	COMMENT_TITLE LIKE '%' || #{commentTitle} || '%'
			</if>
			<if test="commentUpperId != null and commentUpperId != ''">
				AND 	COMMENT_UPPER_ID = #{commentUpperId}
			</if>
		</where>
	</sql>

	<insert id="savePostComment" parameterType="lgs.com.postComment.vo.PostCommentVO">
		/* savePostComment 코멘트 저장 (신규, 수정)  */
		MERGE
		INTO	POST_COMMENT PC
		USING	DUAL
		ON 		(PC.COMMENT_ID = #{commentId})
		WHEN 	MATCHED THEN
		UPDATE
		SET		COMMNET_TITLE			= #{commentTitle}
		,		COMMENT_UPPER_ID		= #{commentUpperId}
		,		COMMENT_TEXT			= #{commentText}
		,		DELETED					= #{deleted}
		,		UPDATE_USER				= #{updateUser}
		,		UPDATE_DATE				= #{updateDate}
		WHEN 	NOT MATCHED THEN
		INSERT
		(
			COMMENT_ID
		,	POST_ID
		,	COMMNET_TITLE
		,	COMMENT_UPPER_ID
		,	COMMENT_TEXT
		,	DELETED
		,	CREATE_USER
		,	CREATE_DATE
		,	UPDATE_USER
		,	UPDATE_DATE
		)
		VALUES
		(
			#{commentId}
		,	#{postId}
		,	#{commentTitle}
		,	#{commentUpperId}
		,	#{commentText}
		,	#{deleted}
		,	#{createUser}
		,	#{createDate}
		,	#{updateUser}
		,	#{updateDate}
		)
	</insert>

	<delete id="deletePostComment" parameterType="lgs.com.postComment.vo.PostCommentVO">
		/* deletePostComment 코멘트 삭제  */
		DELETE
		FROM	POST_COMMENT
		WHERE 	COMMENT_ID IN
		<foreach collection="commentIds" index="index" item="idx"
				 separator="," open="(" close=")" >
			#{idx}
		</foreach>
	</delete>
</mapper>